{{.menu_for_edit}}
<style>
    .list {
    list-style: none;
    margin: 0;
    padding: 0;
}

.list-item {
    display: block;
    padding: 10px;
}
</style>
<form method="post" action="/admin/menus/setposition">
<ul id="for-sort" class="list">
{{range .menu_for_edit.Items.FirstLevel}}
<li data-id="{{.Id}}" class="list-item"><a href="/admin/menus/itemedit?id={{.Id}}">{{.Title}}</a></li>
{{end}}
</ul>
<input type="hidden" id="pos-values" name="positions" value="">
<input type="hidden" name="id" value="{{.menu_for_edit.Id}}">
<button>Сохранить позиции</button>
</form>

<form method="post" action="/admin/menus/itemcreate">
	<input type="text" name="title" placeholder="title">
	<input type="text" name="link" placeholder="link">
	<input type="hidden" name="menu_id" value="{{.menu_for_edit.Id}}">
	<button>Create</button>
</form>

<script>
	function sortable(rootEl, onUpdate){
    var dragEl, nextEl;
    
    // Делаем всех детей перетаскиваемыми
    [].slice.call(rootEl.children).forEach(function (itemEl){
        itemEl.draggable = true;
    });
    
    // Фнукция отвечающая за сортировку
    function _onDragOver(evt){
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'move';
       
        var target = evt.target;
        if( target && target !== dragEl && target.nodeName == 'LI' ){
            // Сортируем
            var rect = target.getBoundingClientRect();
            var next = (evt.clientY - rect.top)/(rect.bottom - rect.top) > .5;
            rootEl.insertBefore(dragEl, next && target.nextSibling || target);
        }
    }
    
    // Окончание сортировки
    function _onDragEnd(evt){
        evt.preventDefault();
       
        dragEl.classList.remove('ghost');
        rootEl.removeEventListener('dragover', _onDragOver, false);
        rootEl.removeEventListener('dragend', _onDragEnd, false);

        if( nextEl !== dragEl.nextSibling ){
            // Сообщаем об окончании сортировки
            onUpdate(dragEl);
        }
    }
    
    // Начало сортировки
    rootEl.addEventListener('dragstart', function (evt){
        dragEl = evt.target; // Запоминаем элемент который будет перемещать
        nextEl = dragEl.nextSibling;
        
        // Ограничиваем тип перетаскивания
        evt.dataTransfer.effectAllowed = 'move';
        evt.dataTransfer.setData('Text', dragEl.textContent);

        // Пописываемся на события при dnd
        rootEl.addEventListener('dragover', _onDragOver, false);
        rootEl.addEventListener('dragend', _onDragEnd, false);

        setTimeout(function (){
            // Если выполнить данное действие без setTimeout, то
            // перетаскиваемый объект, будет иметь этот класс.
            dragEl.classList.add('ghost');
        }, 0)
    }, false);
}

var el = document.getElementById('for-sort'),
pos = document.getElementById('pos-values')
sortable(el,function(){
	var els = document.querySelectorAll("#for-sort li"),
	data = []
	for (var i = 0; i < els.length; i++) {
		data.push(els[i].dataset.id)
	}
	pos.value = data.join(";")
})
</script>